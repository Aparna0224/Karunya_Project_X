{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\newllm\\\\Topperdavid\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quizData = {\n  Python: {\n    1: [{\n      question: \"What is Python?\",\n      options: [\"Snake\", \"Programming Language\", \"Game\", \"Food\"],\n      answer: \"Programming Language\"\n    }, {\n      question: \"Which keyword is used to define a function in Python?\",\n      options: [\"func\", \"def\", \"define\", \"lambda\"],\n      answer: \"def\"\n    }],\n    2: [{\n      question: \"Which data structure uses key-value pairs?\",\n      options: [\"List\", \"Tuple\", \"Dictionary\", \"Set\"],\n      answer: \"Dictionary\"\n    }]\n  },\n  Java: {\n    1: [{\n      question: \"What is Java primarily used for?\",\n      options: [\"Web Development\", \"Android Apps\", \"Enterprise Software\", \"All of the above\"],\n      answer: \"All of the above\"\n    }]\n  }\n};\nconst Quiz = () => {\n  _s();\n  const {\n    courseName,\n    moduleId\n  } = useParams();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (!quizData[courseName] || !quizData[courseName][moduleId]) {\n      console.error(\"Quiz data not found!\");\n      setQuestions([]); // Ensure state is always defined\n    } else {\n      setQuestions(quizData[courseName][moduleId]);\n    }\n    setLoading(false);\n  }, [courseName, moduleId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (!questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quiz available for this module.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Quiz for Module \", moduleId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: q.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: q.options.map((option, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: option\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"MKK+qb950yzNHJm75gUFgTWGOro=\", false, function () {\n  return [useParams];\n});\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useParams","useState","useEffect","jsxDEV","_jsxDEV","quizData","Python","question","options","answer","Java","Quiz","_s","courseName","moduleId","questions","setQuestions","loading","setLoading","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","q","index","option","idx","_c","$RefreshReg$"],"sources":["C:/Users/david/OneDrive/Desktop/newllm/Topperdavid/src/components/Quiz.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nconst quizData = {\n  Python: {\n    1: [\n      { question: \"What is Python?\", options: [\"Snake\", \"Programming Language\", \"Game\", \"Food\"], answer: \"Programming Language\" },\n      { question: \"Which keyword is used to define a function in Python?\", options: [\"func\", \"def\", \"define\", \"lambda\"], answer: \"def\" },\n    ],\n    2: [\n      { question: \"Which data structure uses key-value pairs?\", options: [\"List\", \"Tuple\", \"Dictionary\", \"Set\"], answer: \"Dictionary\" },\n    ],\n  },\n  Java: {\n    1: [\n      { question: \"What is Java primarily used for?\", options: [\"Web Development\", \"Android Apps\", \"Enterprise Software\", \"All of the above\"], answer: \"All of the above\" },\n    ],\n  },\n};\n\nconst Quiz = () => {\n  const { courseName, moduleId } = useParams();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!quizData[courseName] || !quizData[courseName][moduleId]) {\n      console.error(\"Quiz data not found!\");\n      setQuestions([]); // Ensure state is always defined\n    } else {\n      setQuestions(quizData[courseName][moduleId]);\n    }\n    setLoading(false);\n  }, [courseName, moduleId]);\n\n  if (loading) return <p>Loading...</p>;\n\n  if (!questions.length) {\n    return <p>No quiz available for this module.</p>;\n  }\n\n  return (\n    <div>\n      <h2>Quiz for Module {moduleId}</h2>\n      {questions.map((q, index) => (\n        <div key={index}>\n          <p>{q.question}</p>\n          <ul>\n            {q.options.map((option, idx) => (\n              <li key={idx}>{option}</li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Quiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}