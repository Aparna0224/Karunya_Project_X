{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\newllm\\\\Topperdavid\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"./Quiz.css\"; // Import styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  const {\n    courseName,\n    moduleId\n  } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [score, setScore] = useState(0);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  useEffect(() => {\n    // Fetch the quiz questions based on the module content\n    fetch(`/courses/${courseName}_module_${moduleId}_quiz.md`).then(response => response.text()).then(data => {\n      const parsedQuestions = parseQuestions(data);\n      setQuestions(parsedQuestions);\n    }).catch(error => console.error(\"Error loading quiz:\", error));\n  }, [courseName, moduleId]);\n  const parseQuestions = markdown => {\n    // Parse the markdown content to extract questions and answers\n    const lines = markdown.split(\"\\n\");\n    const questions = [];\n    let currentQuestion = null;\n    lines.forEach(line => {\n      if (line.startsWith(\"### \")) {\n        if (currentQuestion) {\n          questions.push(currentQuestion);\n        }\n        currentQuestion = {\n          question: line.substring(4),\n          options: [],\n          answer: \"\"\n        };\n      } else if (line.startsWith(\"- [ ] \")) {\n        currentQuestion.options.push(line.substring(6));\n      } else if (line.startsWith(\"- [x] \")) {\n        currentQuestion.options.push(line.substring(6));\n        currentQuestion.answer = line.substring(6);\n      }\n    });\n    if (currentQuestion) {\n      questions.push(currentQuestion);\n    }\n    return questions;\n  };\n  const handleAnswerChange = (questionIndex, option) => {\n    setUserAnswers({\n      ...userAnswers,\n      [questionIndex]: option\n    });\n  };\n  const handleSubmit = () => {\n    let newScore = 0;\n    questions.forEach((question, index) => {\n      if (userAnswers[index] === question.answer) {\n        newScore += 1;\n      }\n    });\n    setScore(newScore);\n    setIsSubmitted(true);\n    if (newScore >= questions.length / 2) {\n      localStorage.setItem(`${courseName}_module_${moduleId}_passed`, \"true\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"quiz-title\",\n      children: `${courseName} Module ${moduleId} Quiz`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${index}`,\n          value: option,\n          onChange: () => handleAnswerChange(index, option),\n          disabled: isSubmitted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), option]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)), !isSubmitted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your score: \", score, \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), score >= questions.length / 2 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(`/course/${courseName}/${moduleId}`),\n        children: \"Continue to Assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(`/course/${courseName}/${moduleId}`),\n        children: \"Retry Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"ZN1kG4uFKatTpkwKcQ/g5LpYAAQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useParams","useNavigate","useState","useEffect","ReactMarkdown","jsxDEV","_jsxDEV","Quiz","_s","courseName","moduleId","navigate","questions","setQuestions","userAnswers","setUserAnswers","score","setScore","isSubmitted","setIsSubmitted","fetch","then","response","text","data","parsedQuestions","parseQuestions","catch","error","console","markdown","lines","split","currentQuestion","forEach","line","startsWith","push","question","substring","options","answer","handleAnswerChange","questionIndex","option","handleSubmit","newScore","index","length","localStorage","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","optionIndex","type","name","value","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/david/OneDrive/Desktop/newllm/Topperdavid/src/components/Quiz.js"],"sourcesContent":["import { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport \"./Quiz.css\"; // Import styles\r\n\r\nconst Quiz = () => {\r\n  const { courseName, moduleId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState({});\r\n  const [score, setScore] = useState(0);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch the quiz questions based on the module content\r\n    fetch(`/courses/${courseName}_module_${moduleId}_quiz.md`)\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        const parsedQuestions = parseQuestions(data);\r\n        setQuestions(parsedQuestions);\r\n      })\r\n      .catch((error) => console.error(\"Error loading quiz:\", error));\r\n  }, [courseName, moduleId]);\r\n\r\n  const parseQuestions = (markdown) => {\r\n    // Parse the markdown content to extract questions and answers\r\n    const lines = markdown.split(\"\\n\");\r\n    const questions = [];\r\n    let currentQuestion = null;\r\n\r\n    lines.forEach((line) => {\r\n      if (line.startsWith(\"### \")) {\r\n        if (currentQuestion) {\r\n          questions.push(currentQuestion);\r\n        }\r\n        currentQuestion = { question: line.substring(4), options: [], answer: \"\" };\r\n      } else if (line.startsWith(\"- [ ] \")) {\r\n        currentQuestion.options.push(line.substring(6));\r\n      } else if (line.startsWith(\"- [x] \")) {\r\n        currentQuestion.options.push(line.substring(6));\r\n        currentQuestion.answer = line.substring(6);\r\n      }\r\n    });\r\n\r\n    if (currentQuestion) {\r\n      questions.push(currentQuestion);\r\n    }\r\n\r\n    return questions;\r\n  };\r\n\r\n  const handleAnswerChange = (questionIndex, option) => {\r\n    setUserAnswers({ ...userAnswers, [questionIndex]: option });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let newScore = 0;\r\n    questions.forEach((question, index) => {\r\n      if (userAnswers[index] === question.answer) {\r\n        newScore += 1;\r\n      }\r\n    });\r\n    setScore(newScore);\r\n    setIsSubmitted(true);\r\n\r\n    if (newScore >= questions.length / 2) {\r\n      localStorage.setItem(`${courseName}_module_${moduleId}_passed`, \"true\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <h1 className=\"quiz-title\">{`${courseName} Module ${moduleId} Quiz`}</h1>\r\n      {questions.map((question, index) => (\r\n        <div key={index} className=\"question\">\r\n          <h3>{question.question}</h3>\r\n          {question.options.map((option, optionIndex) => (\r\n            <label key={optionIndex}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${index}`}\r\n                value={option}\r\n                onChange={() => handleAnswerChange(index, option)}\r\n                disabled={isSubmitted}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      {!isSubmitted ? (\r\n        <button onClick={handleSubmit}>Submit</button>\r\n      ) : (\r\n        <div>\r\n          <p>Your score: {score}/{questions.length}</p>\r\n          {score >= questions.length / 2 ? (\r\n            <button onClick={() => navigate(`/course/${courseName}/${moduleId}`)}>Continue to Assessment</button>\r\n          ) : (\r\n            <button onClick={() => navigate(`/course/${courseName}/${moduleId}`)}>Retry Quiz</button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}